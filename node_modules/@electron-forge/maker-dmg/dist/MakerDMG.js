"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MakerDMG extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'dmg');

    _defineProperty(this, "defaultPlatforms", ['darwin', 'mas']);
  }

  isSupportedOnCurrentPlatform() {
    return process.platform === 'darwin';
  }

  async make({
    dir,
    makeDir,
    appName,
    packageJSON,
    targetArch
  }) {
    // eslint-disable-next-line global-require
    const electronDMG = require('electron-installer-dmg');

    const outPath = _path.default.resolve(makeDir, `${this.config.name || appName}.dmg`);

    const forgeDefaultOutPath = _path.default.resolve(makeDir, `${appName}-${packageJSON.version}-${targetArch}.dmg`);

    await this.ensureFile(outPath);
    const dmgConfig = {
      overwrite: true,
      name: appName,
      ...this.config,
      appPath: _path.default.resolve(dir, `${appName}.app`),
      out: _path.default.dirname(outPath)
    };
    const opts = await electronDMG(dmgConfig);

    if (!this.config.name) {
      await this.ensureFile(forgeDefaultOutPath);
      await _fsExtra.default.rename(outPath, forgeDefaultOutPath);
      return [forgeDefaultOutPath];
    }

    return [opts.dmgPath];
  }

}

exports.default = MakerDMG;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlckRNRy50cyJdLCJuYW1lcyI6WyJNYWtlckRNRyIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJtYWtlIiwiZGlyIiwibWFrZURpciIsImFwcE5hbWUiLCJwYWNrYWdlSlNPTiIsInRhcmdldEFyY2giLCJlbGVjdHJvbkRNRyIsInJlcXVpcmUiLCJvdXRQYXRoIiwicGF0aCIsInJlc29sdmUiLCJjb25maWciLCJuYW1lIiwiZm9yZ2VEZWZhdWx0T3V0UGF0aCIsInZlcnNpb24iLCJlbnN1cmVGaWxlIiwiZG1nQ29uZmlnIiwib3ZlcndyaXRlIiwiYXBwUGF0aCIsIm91dCIsImRpcm5hbWUiLCJvcHRzIiwiZnMiLCJyZW5hbWUiLCJkbWdQYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFHQTs7QUFDQTs7Ozs7O0FBR2UsTUFBTUEsUUFBTixTQUF1QkMsa0JBQXZCLENBQWlEO0FBQUE7QUFBQTs7QUFBQSxrQ0FDdkQsS0FEdUQ7O0FBQUEsOENBRzFCLENBQUMsUUFBRCxFQUFXLEtBQVgsQ0FIMEI7QUFBQTs7QUFLOURDLEVBQUFBLDRCQUE0QixHQUFZO0FBQ3RDLFdBQU9DLE9BQU8sQ0FBQ0MsUUFBUixLQUFxQixRQUE1QjtBQUNEOztBQUVTLFFBQUpDLElBQUksQ0FBQztBQUFFQyxJQUFBQSxHQUFGO0FBQU9DLElBQUFBLE9BQVA7QUFBZ0JDLElBQUFBLE9BQWhCO0FBQXlCQyxJQUFBQSxXQUF6QjtBQUFzQ0MsSUFBQUE7QUFBdEMsR0FBRCxFQUFzRjtBQUM5RjtBQUNBLFVBQU1DLFdBQVcsR0FBR0MsT0FBTyxDQUFDLHdCQUFELENBQTNCOztBQUVBLFVBQU1DLE9BQU8sR0FBR0MsY0FBS0MsT0FBTCxDQUFhUixPQUFiLEVBQXVCLEdBQUUsS0FBS1MsTUFBTCxDQUFZQyxJQUFaLElBQW9CVCxPQUFRLE1BQXJELENBQWhCOztBQUNBLFVBQU1VLG1CQUFtQixHQUFHSixjQUFLQyxPQUFMLENBQWFSLE9BQWIsRUFBdUIsR0FBRUMsT0FBUSxJQUFHQyxXQUFXLENBQUNVLE9BQVEsSUFBR1QsVUFBVyxNQUF0RSxDQUE1Qjs7QUFFQSxVQUFNLEtBQUtVLFVBQUwsQ0FBZ0JQLE9BQWhCLENBQU47QUFDQSxVQUFNUSxTQUFTLEdBQUc7QUFDaEJDLE1BQUFBLFNBQVMsRUFBRSxJQURLO0FBRWhCTCxNQUFBQSxJQUFJLEVBQUVULE9BRlU7QUFHaEIsU0FBRyxLQUFLUSxNQUhRO0FBSWhCTyxNQUFBQSxPQUFPLEVBQUVULGNBQUtDLE9BQUwsQ0FBYVQsR0FBYixFQUFtQixHQUFFRSxPQUFRLE1BQTdCLENBSk87QUFLaEJnQixNQUFBQSxHQUFHLEVBQUVWLGNBQUtXLE9BQUwsQ0FBYVosT0FBYjtBQUxXLEtBQWxCO0FBT0EsVUFBTWEsSUFBSSxHQUFHLE1BQU1mLFdBQVcsQ0FBQ1UsU0FBRCxDQUE5Qjs7QUFDQSxRQUFJLENBQUMsS0FBS0wsTUFBTCxDQUFZQyxJQUFqQixFQUF1QjtBQUNyQixZQUFNLEtBQUtHLFVBQUwsQ0FBZ0JGLG1CQUFoQixDQUFOO0FBQ0EsWUFBTVMsaUJBQUdDLE1BQUgsQ0FBVWYsT0FBVixFQUFtQkssbUJBQW5CLENBQU47QUFDQSxhQUFPLENBQUNBLG1CQUFELENBQVA7QUFDRDs7QUFFRCxXQUFPLENBQUNRLElBQUksQ0FBQ0csT0FBTixDQUFQO0FBQ0Q7O0FBaEM2RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYWtlckJhc2UsIHsgTWFrZXJPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL21ha2VyLWJhc2UnO1xuaW1wb3J0IHsgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBNYWtlckRNR0NvbmZpZyB9IGZyb20gJy4vQ29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFrZXJETUcgZXh0ZW5kcyBNYWtlckJhc2U8TWFrZXJETUdDb25maWc+IHtcbiAgbmFtZSA9ICdkbWcnO1xuXG4gIGRlZmF1bHRQbGF0Zm9ybXM6IEZvcmdlUGxhdGZvcm1bXSA9IFsnZGFyd2luJywgJ21hcyddO1xuXG4gIGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nO1xuICB9XG5cbiAgYXN5bmMgbWFrZSh7IGRpciwgbWFrZURpciwgYXBwTmFtZSwgcGFja2FnZUpTT04sIHRhcmdldEFyY2ggfTogTWFrZXJPcHRpb25zKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxuICAgIGNvbnN0IGVsZWN0cm9uRE1HID0gcmVxdWlyZSgnZWxlY3Ryb24taW5zdGFsbGVyLWRtZycpO1xuXG4gICAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShtYWtlRGlyLCBgJHt0aGlzLmNvbmZpZy5uYW1lIHx8IGFwcE5hbWV9LmRtZ2ApO1xuICAgIGNvbnN0IGZvcmdlRGVmYXVsdE91dFBhdGggPSBwYXRoLnJlc29sdmUobWFrZURpciwgYCR7YXBwTmFtZX0tJHtwYWNrYWdlSlNPTi52ZXJzaW9ufS0ke3RhcmdldEFyY2h9LmRtZ2ApO1xuXG4gICAgYXdhaXQgdGhpcy5lbnN1cmVGaWxlKG91dFBhdGgpO1xuICAgIGNvbnN0IGRtZ0NvbmZpZyA9IHtcbiAgICAgIG92ZXJ3cml0ZTogdHJ1ZSxcbiAgICAgIG5hbWU6IGFwcE5hbWUsXG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFwcFBhdGg6IHBhdGgucmVzb2x2ZShkaXIsIGAke2FwcE5hbWV9LmFwcGApLFxuICAgICAgb3V0OiBwYXRoLmRpcm5hbWUob3V0UGF0aCksXG4gICAgfTtcbiAgICBjb25zdCBvcHRzID0gYXdhaXQgZWxlY3Ryb25ETUcoZG1nQ29uZmlnKTtcbiAgICBpZiAoIXRoaXMuY29uZmlnLm5hbWUpIHtcbiAgICAgIGF3YWl0IHRoaXMuZW5zdXJlRmlsZShmb3JnZURlZmF1bHRPdXRQYXRoKTtcbiAgICAgIGF3YWl0IGZzLnJlbmFtZShvdXRQYXRoLCBmb3JnZURlZmF1bHRPdXRQYXRoKTtcbiAgICAgIHJldHVybiBbZm9yZ2VEZWZhdWx0T3V0UGF0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtvcHRzLmRtZ1BhdGhdO1xuICB9XG59XG4iXX0=